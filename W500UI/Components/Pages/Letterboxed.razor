@page "/letterboxed"
@rendermode InteractiveServer

<PageTitle>LB</PageTitle>

@using W500Core
@using Microsoft.AspNetCore.Components.Forms
@inject LbService LbService

<p>
    <h5>Enter "Box" as 12-letter Word</h5>
    <input @oninput="EnterBox" value="@BoxEntry" />
</p>
<p>
    @LbPath
</p>
<p>
    <table>
        <thead>
            <tr>
                <td><b>Letter</b></td>
                <td><b>Starts With</b></td>
                <td><b>Ends With</b></td>
                <td><b>Contains</b></td>
            </tr>
        </thead>
        <tbody>
                @foreach (var s in LbSuggestions.OrderBy(x=>x.Contains.Count))
                {
                <tr>
                    <td>
                        @s.Letter
                    </td>
                    <td>
                        @String.Join(", ", s.StartsWith)
                    </td>
                    <td>
                        @String.Join(", ", s.EndsWith)
                    </td>
                    <td>
                        @String.Join(", ", s.Contains)
                    </td>
                </tr>
            }
        </tbody>
    </table>
</p>
<p>
    <button @onclick="NewGame">New Game</button>        
</p>


@code {
    private string? BoxEntry { set; get; }
    private List<LbSuggestion> LbSuggestions;
    private string? LbPath { set; get; }

    protected async override Task OnInitializedAsync()
    {
        await NewGame();
    }

    protected async Task NewGame()
    {
        await LbService.Reset();
        LbSuggestions = new List<LbSuggestion>();
    }

    protected async Task ResetGuesses()
    {
        await LbService.Reset();
        LbSuggestions = new List<LbSuggestion>();
    }


    private async void EnterBox(ChangeEventArgs args)
    {
        BoxEntry = args.Value.ToString().ToLower();
        if (BoxEntry?.Length != W500Constants.LbWordLength) return;
        await LbService.EnterBox(BoxEntry);
        LbSuggestions = await LbService.GetSuggestions();
        BoxEntry = string.Empty;
        await LbService.FindShortestPath(null);
        LbPath = LbService.BestPath;
    }
}
