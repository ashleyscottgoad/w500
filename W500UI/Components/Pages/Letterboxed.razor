@page "/letterboxed"
@rendermode InteractiveServer

<PageTitle>LB</PageTitle>

@using System.Diagnostics
@using HtmlAgilityPack
@using System.Text
@using W500Core
@using Microsoft.AspNetCore.Components.Forms
@inject LbService LbService
@inject HttpClient Http

<p>
    <Button Color="ButtonColor.Primary" @onclick="RetrieveDailyPuzzle" disabled="@SpinnerVisible">Retrieve Puzzle</Button>
</p>
<p>
    <h5>Box: @PrintBox(LbService.Box)</h5>
</p>
@if (LbService.Box?.Length > 0)
{
    <p><Button Color="ButtonColor.Success" @onclick="SolveDailyPuzzle" disabled="@SpinnerVisible">Solve Puzzle</Button></p>
}

@if (SpinnerVisible)
{
    <div class="spinner-container">
        <Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Primary" />
        <p>Loading, please wait...</p>
    </div>
}

@if (LbPath?.Length > 0)
{
    <p>
        <b>Best Solution: </b>@LbPath
    </p>
    <p>
        <i>Elapsed: @ElapsedSeconds</i>
    </p>
}

@if (OurSolution?.Length > 0)
{
    <p>
        <b>Official Solution: </b>@OurSolution
    </p>
}

@code {
    private string? BoxEntry { set; get; }
    private List<LbSuggestion> LbSuggestions = new();
    private string? LbPath { set; get; }
    private string? ElapsedSeconds { set; get; }
    private bool SpinnerVisible { set; get; }
    private string? OurSolution { set; get; }

    protected async override Task OnInitializedAsync()
    {
        SetSpinner(false);
    }

    protected async Task RetrieveDailyPuzzle()
    {
        string filePath = "compressed.html";
        var htmlDoc = new HtmlDocument();
        var htmlTask = await RetrieveHtmlFromUrl("https://nytimes.com/puzzles/letter-boxed");
        htmlDoc.LoadHtml(htmlTask);
        htmlDoc.Save(filePath);
        var gameData = HtmlExtractor.ExtractGameData(filePath);
        var newDict = gameData.dictionary.Except(gameData.ourSolution).ToArray();
        LbService.SetDictionary(newDict);
        OurSolution = string.Join(", ", gameData.ourSolution);
        var box = string.Join("", gameData.sides);
        await LbService.SetBox(box);
    }

    private string PrintBox(string box)
    {
        if (string.IsNullOrEmpty(box))
        {
            return string.Empty;
        }
        var stringBuilder = new StringBuilder();
        for (int i = 0; i < box.Length; i++)
        {
            if (i > 0 && i % 3 == 0)
            {
                stringBuilder.Append('+');
            }
            stringBuilder.Append(box[i]);
        }

        return stringBuilder.ToString();
    }

    private async Task SolveDailyPuzzle()
    {
        SetSpinner(true);
        ElapsedSeconds = string.Empty;
        Stopwatch sw = new Stopwatch();
        sw.Start();
        LbPath = string.Empty;
        await Task.Run(() => SolvePuzzle());
        sw.Stop();
        ElapsedSeconds = $"{Math.Round(sw.Elapsed.TotalSeconds, 1)} seconds";
        SetSpinner(false);
        await Task.CompletedTask;
    }

    private async Task<string> RetrieveHtmlFromUrl(string url)
    {
        try
        {
            var response = await Http.GetAsync(url);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            // Handle exceptions as needed
            Console.WriteLine($"Error retrieving HTML: {ex.Message}");
            return string.Empty;
        }
    }

    private async Task SolvePuzzle()
    {
        await LbService.EnterBox();
        await LbService.FindShortestPath(null);
        LbPath = LbService.BestPath;
    }

    private void SetSpinner(bool set)
    {
        SpinnerVisible = set;
        StateHasChanged();
    }
}

<style>
    .spinner-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin-top: 20px;
    }
</style>