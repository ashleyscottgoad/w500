@page "/letterboxed"
@rendermode InteractiveServer

<PageTitle>LB</PageTitle>

@using System.Diagnostics
@using W500Core
@using Microsoft.AspNetCore.Components.Forms
@inject LbService LbService

<p>
    <h5>Enter "Box" as 12-letter Word</h5>
    <h6><i>Ex: "gaphutcinmos" would represent a box with sides GAP+HUT+CIN+MOS</i></h6>
    <input @oninput="EnterBox" value="@BoxEntry" />
</p>

@if (LbPath?.Length > 0)
{
    <p>
        <b>Best Solution: </b>@LbPath
    </p>
    <p>
        <i>Elapsed: @ElapsedSeconds</i>
    </p>

}
else if (SpinnerVisible)
{
    <Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Primary" />
}

@if (@LbSuggestions?.Count > 0)
{
    <p>
        <table class="table table-light table-bordered">
            <thead class="table-dark fw-bold">
                <tr>
                    <td>Letter</td>
                    <td>Starts With</td>
                    <td>Ends With</td>
                    <td>Contains</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var s in LbSuggestions.OrderBy(x => x.Letter))
                {
                    <tr>
                        <td class="table-primary fw-bold">
                            @s.Letter
                        </td>
                        <td class="table-success">
                            @String.Join(", ", s.StartsWith)
                        </td>
                        <td class="table-warning">
                            @String.Join(", ", s.EndsWith)
                        </td>
                        <td class="table-secondary">
                            @String.Join(", ", s.Contains.Except(s.StartsWith).Except(s.EndsWith))
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </p>
}

@code {
    private string? BoxEntry { set; get; }
    private List<LbSuggestion> LbSuggestions;
    private string? LbPath { set; get; }
    private string? ElapsedSeconds { set; get; }
    private bool SpinnerVisible { set; get; }

    protected async override Task OnInitializedAsync()
    {
        await NewGame();
    }

    protected async Task NewGame()
    {
        SetSpinner(false);
        await LbService.Reset();
        LbSuggestions = new List<LbSuggestion>();
        ElapsedSeconds = string.Empty;
        await RetrieveDailyPuzzle();
    }

    protected async Task RetrieveDailyPuzzle()
    {
        //gaphutcinmos
        //odiabtreckvp
        //get box from https://nytimes.com/puzzles/letter-boxed
        //validate word
        //Set BoxEntry
        //Call SolvePuzzle()
    }

    private async Task SolvePuzzle()
    {
        await LbService.EnterBox(BoxEntry);
        LbSuggestions = await LbService.GetSuggestions();
        await LbService.FindShortestPath(null);
        LbPath = LbService.BestPath;
    }

    protected async Task ResetGuesses()
    {
        await LbService.Reset();
        LbSuggestions = new List<LbSuggestion>();
    }

    private void SetSpinner(bool set)
    {
        SpinnerVisible = set;
        StateHasChanged();
    }

    private async void EnterBox(ChangeEventArgs args)
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();
        LbPath = string.Empty;
        LbSuggestions = new List<LbSuggestion>();
        ElapsedSeconds = string.Empty;
        BoxEntry = args.Value.ToString().ToLower();
        if (BoxEntry?.Length != W500Constants.LbWordLength) return;
        SetSpinner(true);
        await Task.Run(() => SolvePuzzle());
        sw.Stop();
        ElapsedSeconds = string.Format("{0} seconds", Math.Round(sw.Elapsed.TotalSeconds,1));
        SetSpinner(false);
        await Task.CompletedTask;
    }
}
